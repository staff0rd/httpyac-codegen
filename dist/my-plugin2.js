"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.preset = exports.resolveDocumentImports = void 0;
var add_1 = require("@graphql-codegen/add");
var path_1 = require("path");
var graphql_1 = require("graphql");
var utils_1 = require("./utils");
var resolve_document_imports_1 = require("./resolve-document-imports");
exports.resolveDocumentImports = resolve_document_imports_1.resolveDocumentImports;
var visitor_plugin_common_1 = require("@graphql-codegen/visitor-plugin-common");
exports.preset = {
    buildGeneratesSection: function (options) {
        var e_1, _a, e_2, _b, _c, _d, _e, e_3, _f;
        var _g;
        var schemaObject = options.schemaAst
            ? options.schemaAst
            : (0, graphql_1.buildASTSchema)(options.schema, options.config);
        var baseDir = options.presetConfig.cwd || process.cwd();
        var extension = options.presetConfig.extension || ".generated.ts";
        var folder = options.presetConfig.folder || "";
        var importTypesNamespace = options.presetConfig.importTypesNamespace || "Types";
        var importAllFragmentsFrom = options.presetConfig.importAllFragmentsFrom || null;
        var baseTypesPath = options.presetConfig.baseTypesPath;
        if (!baseTypesPath) {
            throw new Error("Preset \"near-operation-file\" requires you to specify \"baseTypesPath\" configuration and point it to your base types file (generated by \"typescript\" plugin)!");
        }
        var shouldAbsolute = !baseTypesPath.startsWith("~");
        var pluginMap = __assign(__assign({}, options.pluginMap), { add: add_1["default"] });
        var sources = (0, resolve_document_imports_1.resolveDocumentImports)(options, schemaObject, {
            baseDir: baseDir,
            generateFilePath: function (location) {
                var newFilePath = (0, utils_1.defineFilepathSubfolder)(location, folder);
                return (0, utils_1.appendExtensionToFilePath)(newFilePath, extension);
            },
            schemaTypesSource: {
                path: shouldAbsolute
                    ? (0, path_1.join)(options.baseOutputDir, baseTypesPath)
                    : baseTypesPath,
                namespace: importTypesNamespace
            },
            typesImport: (_g = options.config.useTypeImports) !== null && _g !== void 0 ? _g : false
        }, (0, visitor_plugin_common_1.getConfigValue)(options.config.dedupeFragments, false));
        var filePathsMap = new Map();
        try {
            for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {
                var source = sources_1_1.value;
                var record = filePathsMap.get(source.filename);
                if (record === undefined) {
                    record = {
                        importStatements: new Set(),
                        documents: [],
                        externalFragments: [],
                        fragmentImports: []
                    };
                    filePathsMap.set(source.filename, record);
                }
                try {
                    for (var _h = (e_2 = void 0, __values(source.importStatements)), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var importStatement = _j.value;
                        record.importStatements.add(importStatement);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_b = _h["return"])) _b.call(_h);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                (_c = record.documents).push.apply(_c, __spreadArray([], __read(source.documents), false));
                (_d = record.externalFragments).push.apply(_d, __spreadArray([], __read(source.externalFragments), false));
                (_e = record.fragmentImports).push.apply(_e, __spreadArray([], __read(source.fragmentImports), false));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (sources_1_1 && !sources_1_1.done && (_a = sources_1["return"])) _a.call(sources_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var artifacts = [];
        var _loop_1 = function (filename, record) {
            var e_4, _o, _p;
            var fragmentImportsArr = record.fragmentImports;
            if (importAllFragmentsFrom) {
                fragmentImportsArr = record.fragmentImports.map(function (t) {
                    var newImportSource = typeof importAllFragmentsFrom === "string"
                        ? __assign(__assign({}, t.importSource), { path: importAllFragmentsFrom }) : importAllFragmentsFrom(t.importSource, filename);
                    return __assign(__assign({}, t), { importSource: newImportSource || t.importSource });
                });
            }
            var plugins = __spreadArray(__spreadArray([], __read((options.config.globalNamespace
                ? []
                : Array.from(record.importStatements).map(function (importStatement) { return ({
                    add: { content: importStatement }
                }); }))), false), __read(options.plugins), false);
            var config = __assign(__assign({}, options.config), { 
                // This is set here in order to make sure the fragment spreads sub types
                // are exported from operations file
                exportFragmentSpreadSubTypes: true, namespacedImportName: importTypesNamespace, externalFragments: record.externalFragments, fragmentImports: fragmentImportsArr });
            var document_1 = { kind: graphql_1.Kind.DOCUMENT, definitions: [] };
            var combinedSource = {
                rawSDL: "",
                document: document_1,
                location: record.documents[0].location
            };
            try {
                for (var _q = (e_4 = void 0, __values(record.documents)), _r = _q.next(); !_r.done; _r = _q.next()) {
                    var source = _r.value;
                    combinedSource.rawSDL += source.rawSDL;
                    (_p = combinedSource.document.definitions).push.apply(_p, __spreadArray([], __read(source.document.definitions), false));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_r && !_r.done && (_o = _q["return"])) _o.call(_q);
                }
                finally { if (e_4) throw e_4.error; }
            }
            artifacts.push({
                filename: filename,
                documents: [combinedSource],
                plugins: plugins,
                pluginMap: pluginMap,
                config: config,
                schema: options.schema,
                schemaAst: schemaObject,
                skipDocumentsValidation: true
            });
        };
        try {
            for (var _k = __values(filePathsMap.entries()), _l = _k.next(); !_l.done; _l = _k.next()) {
                var _m = __read(_l.value, 2), filename = _m[0], record = _m[1];
                _loop_1(filename, record);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_f = _k["return"])) _f.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return artifacts;
    }
};
exports["default"] = exports.preset;
